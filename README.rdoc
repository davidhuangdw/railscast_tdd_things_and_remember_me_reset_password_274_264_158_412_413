

### continuous test: guard, rspec, factory_girls, capybara

        # bug & solutions:
        # 1. undefined method 'visit' --  forgot 'it'
        # 2. uninitialized constant 'Rails' --
        #   * should puts config under 'rails_helper.rb', where having 'require ..environment'

        # capybara api
        fill_in ..., match: :first, with: ...
        have_selector
        first(:link, '...')

        # example
        describe "PasswordResets", type: :request do
          it 'emails user when requesting password reset' do
            user = create(:user)
            visit login_path
            click_link "Forgotten"
            fill_in "Email", with: user.email
            click_button "Reset Password"
            expect(current_path).to eq(root_path)
            expect(last_email.to).to include(user.email)
            expect(page).to have_content('Email sent')
          end
        end
        # user_spec.rb
        describe User, :type => :model do
          let(:user) {create(:user)}
          describe '#send_password_reset' do
            before {user.send_password_reset}
            it "generate a unique password_reset_token each time" do
              last_token = user.password_reset_token
              user.send_password_reset
              expect(user.password_reset_token).not_to eq(last_token)
            end

            it "saves the time the password reset was sent" do
              expect(user.password_reset_sent_at).to be_present
            end

            it "deliver email to user" do
              expect(last_email.to).to include(user.email)
            end
          end
        end
        # user_mailer_spec.rb
        RSpec.describe UserMailer, :type => :mailer do
          describe "password_reset" do
            let(:user) {create(:user, password_reset_token:'anything')}
            let(:mail) { UserMailer.password_reset(user) }

            it "renders the headers" do
              expect(mail.subject).to eq("Reset password on rails")
              expect(mail.to).to eq([user.email])
              expect(mail.from).to eq(["davidhuangdw@163.com"])
            end

            it "renders the body" do
              expect(mail.body.encoded).to match(edit_password_reset_url(user.password_reset_token))
            end
          end
        end

        # skip controller/view specs
        rails g controler .... --no-test-framework

        # factories/user.rb
        FactoryGirl.define do
          factory :user do
            email 'davi@hi.com'
            password '123'
            password_confirmation '123'
          end
        end

        # generate rspec tests:
        rails g rspec:model user
        rails g rspec:feature password_reset

        # generate factory_girls fixture for models:
        rails g factory_girls:model :user

        # init rspec, guard
        rails g rspec:install
        guard init rspec

        # Guardfile: use 'spring rspec'
        guard :rspec, cmd: 'spring rspec' do

        # spec_helper.rb
        require 'capybara/rspec'
        require 'factory_girl'
        Dir[Rails.root.join("spec/support/**/*.rb")].each {|f| require f}

        Rspec.configure do |config|
          config.filter_run :focus
          config.run_all_when_everything_filtered = true

          config.order = "random"
          config.include Capybara::DSL
          config.include FactoryGirl::Syntax::Methods
          ...

        # gems:
        roup :development do
          gem "better_errors"               # don't put 'better_errors' under 'test'
          gem "binding_of_caller"
        end

        group :development, :test do
          gem 'rspec-rails'
          gem 'spring-commands-rspec'
          gem 'factory_girl_rails'
          gem 'capybara'
          gem 'rb-fsevent', require:false
          gem 'guard-rspec'
        end

### more complex authentication: remember me & password forgotten (cookies, auth token, mailer)

        # edit/update password_reset
        # password_reset_controller.rb
          def edit
            @user = User.find_by_password_reset_token(params[:id])
          end
          def upate
            @user = User.find_by_password_reset_token(params[:id])
            if @user && @user.update_attributes(user_params)
              redirect_to login_url, notice:'....'
            else
              render 'edit'
            end
          end
        # view/password_resets/edit.haml
        = simple_form_for @user, url:password_reset(params[:id]) do |f|
        ... :password, :password_confirmation


        # setup mailer:
        rails g mailer user_mailer password_reset
        # user model:
          def send_password_reset
            generate_token(:password_reset_token)
            self.password_reset_send_at = Time.now
            save!
            UserMailer.password_reset(self).deliver
          end
        # mailer controller:
          default from:'davidhuangdw@163.com'
          def password_reset(user)
            @user = user
            mail to:user.email, subject: '...'
          end
        # view:
        # password_reset.text.haml
        = edit_password_reset(@user.password_reset_token)

        # action_mailer
        # development.rb
          config.action_mailer.default_url_options = {host:'localhost:3000'}
          config.action_mailer.smtp_settings = {
            address: 'smtp.163.com'
            authentication: :plain
            user_name: 'davidhuangdw@163.com'
            password: '...'
          }

        # reset password by email:
        # migration
        rails g migration add_password_reset_to_users password_reset_token password_reset_sent_at:datetime
        # add controller
        rails g controller password_resets new
        # routes
        resources :password_resets
        # view
        # password_resets/new.haml
        ... url: password_resets
        ... params[:email]
        # controller
          def create
            user = User.find_by_email(params[:email])
            user.send_password_reset if user
            redirect_to root_url, notice: ...
          end

        # user 'auth_token' in cookies, rather than 'user_id'
        # migration
        rails g add_auth_token_to_users auth_token
        # session controller
        def create
          ...
            ck = params[:remember_me] ? cookies.permanent : cookies
            ck[:auth_token] = user.auth_token
        end
        def destroy
          cookies.delete(:auth_token)
        end
        # user model:
        class User
          after_create {generate_token(:auth_token); save!;}
          def generate_token(column)
            begin
              self[column] = SecureRandom.urlsafe_base64
            end while User.exists?(column => self[column])
          end
        end

